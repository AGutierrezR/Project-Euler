// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

let num = 1,
    solution;

function triangleNumbers(n) {
  let sum = 0

  for(let i = n + 1; --i;) {
    sum += i;
  }

  return sum;
}

function divisors(n) {
  if (n === 1) return 1;

  let count = 2, // if is greater then 1, it's always has 2 divisors (1 and itself)
      sqrt = Math.floor(Math.sqrt(n));

  for(let i = 2; i <= sqrt ;i++) {
    if (n % i === 0 ) count += 2;
  }

  return count;
}

while(++num) {
  let triangle = triangleNumbers(num);
  let d = divisors(triangle);

  if(d > 500) {
    solution = triangle;
    break;
  }
}

console.log(solution);